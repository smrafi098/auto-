// Function to download images without repeating downloads
function optimizedDownloadImages() {
  // Retrieve processed URLs from local storage or initialize an empty array
  let processedUrls = JSON.parse(localStorage.getItem('processedUrls')) || [];

  // Select the container where images are located
  const container = document.querySelector('.m-4451eb3a'); // Adjust the selector based on your HTML

  if (!container) {
    console.error('Container not found!');
    return;
  }

  // Select all img elements within the container
  const images = container.querySelectorAll('img');

  images.forEach(image => {
    const imageUrl = image.src;

    // Skip download if the URL is already processed
    if (!processedUrls.includes(imageUrl)) {
      const filename = imageUrl.substring(imageUrl.lastIndexOf('/') + 1); // Extract filename from URL

      // Fetch the image data and trigger the download
      fetch(imageUrl)
        .then(response => response.blob())
        .then(blob => {
          const link = document.createElement('a');
          link.href = URL.createObjectURL(blob);
          link.download = filename;
          link.style.display = 'none';

          document.body.appendChild(link);
          link.click();
          document.body.removeChild(link);

          // Add the URL to the list of processed URLs
          processedUrls.push(imageUrl);
          localStorage.setItem('processedUrls', JSON.stringify(processedUrls));
        })
        .catch(error => console.error('Error downloading image:', error));
    }
  });
}

// Function to observe the container for new images
defineObserver();
function defineObserver() {
  const container = document.querySelector('.m-4451eb3a'); // Adjust the selector based on your HTML

  if (!container) {
    console.error('Container not found for observer!');
    return;
  }

  const observer = new MutationObserver(() => optimizedDownloadImages());

  observer.observe(container, { childList: true, subtree: true });
}

// Run the download function once initially
optimizedDownloadImages();
